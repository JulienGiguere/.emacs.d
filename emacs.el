;; Auto generated based on org-babel literate config from emacs.org.
;; Do not edit this file.

;;--------------------------------------------------------------------------
;;  Unsorted Config Start  
;;--------------------------------------------------------------------------

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes '(julien))
 '(custom-safe-themes
   '("b99846c178e46711cf33b628930915659c8b9848a47b085e1f91623a08e6cc4b"
     "2eaf2917992a73b10838b0224c54042570eeb894f52e6dc4b98f9d109d9ebe31"
     "e1bb83b1b09acfbc2806438f849d371d17e2b08cb3bd9f6a9cea71f08ca97f80"
     "78c3ccacbd7bddb472bb0a4c6d1195b3046a2fd1d7eb94ba33c44103a57038ce"
     "8b8d09791e6774ed53203f578fd0a7e92af3548573efdaeaec096ee62459e67e"
     default))
 '(org-agenda-files
   '("~/Documents/RoamNotes/20240429181824-ets.org"
     "/home/julien/Documents/RoamNotes/ets20250107084152-gia400.org"
     "/home/julien/Documents/RoamNotes/ets20250107084142-mat145.org"
     "/home/julien/Documents/RoamNotes/ets20250107084129-phy335.org"
     "/home/julien/Documents/RoamNotes/ets20250107083026-log121.org"))
 '(package-selected-packages
   '(aider avy chatgpt-shell company crdt drag-stuff flycheck-yamllint
           gptel helm ivy lsp-java lsp-ui magit multiple-cursors
           nix-mode org-bullets org-roam-ui restclient simple-httpd
           swiper tree-sitter-langs treemacs-icons-dired
           treemacs-magit treemacs-persp treemacs-projectile
           treemacs-tab-bar treesit-auto try tsc vterm websocket
           wikinforg yaml-mode)))

(package-refresh-contents)
(add-to-list 'load-path "~/.emacs.d/elpa/")

(eval-when-compile
  (require 'use-package))

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-always-ensure nil)
(setq use-package-ensure-function 'ignore)

;; Custom Commands
  ;; Refreshes Emacs config
  (global-set-key (kbd "C-c e") (lambda () (interactive) (load-file "~/.emacs.d/init.el")))

(defun paste-image-from-clipboard ()
  "Paste an image from the clipboard as a file in the images/ folder."
  (interactive)
  (let* ((dir "./images/")  ;; Folder to save the image
         (filename (concat dir (make-temp-name "img-") ".png")))
    (unless (file-exists-p dir)
      (make-directory dir))  ;; Create the images folder if it doesn't exist
    (shell-command (concat "wl-paste --type image/png > " filename))  ;; Use wl-clipboard
    (insert (concat "[[file:" filename "]]"))
    (message "Image saved as %s" filename)))

  (global-set-key (kbd "C-c [") 'paste-image-from-clipboard)
  (setq vc-follow-symlinks t)
  ;;Renders Images inline of an org file
  (defun do-org-show-all-inline-images ()
    (interactive)
    (org-display-inline-images t t))
  
;; Write backups to ~/.emacs.d/backup/ to no clutter working directories
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
      backup-by-copying      t  ; Don't de-link hard links
      version-control        t  ; Use version numbers on backups
      delete-old-versions    t  ; Automatically delete excess backups:
      kept-new-versions      20 ; how many of the newest versions to keep
      kept-old-versions      5) ; and how many of the old

;;Word Wrap
(add-hook 'text-mode-hook 'visual-line-mode)
(global-set-key (kbd "C-c w w") 'visual-line-mode)

;;Discord Rich Presence
;(require 'elcord)
;(elcord-mode)

;; Package Management
(require 'package)
    (add-to-list 'package-archives
		 '("melpa"."https://melpa.org/packages/"))
    ;; Bootstrap use-package
    (unless (package-installed-p 'use-package)
(package-refresh-contents)
(package-install 'use-package))

;; UI
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (global-hl-line-mode t)

;; Startup - Start Page
  (setq inhibit-startup-message t)
  (setq inhibit-splash-screen t)
  (setq initial-buffer-choice "~/.emacs.d/start.org")


;; Set the default font
(set-face-attribute 'default nil
                    :family "Iosevka"
                    :height 130)

;; Set color for selected region
(set-face-attribute 'region nil
                    :background "#424140")
;; Set color for current line (where the cursor is)
(set-face-background hl-line-face "gray13") 

;;(set-frame-parameter (selected-frame) 'alpha '(80 . 79))

(defvar blink-cursor-colors (list "#FFFFFF" "#FF7F00")
  "On each blink the cursor will cycle to the next color in this list.")
(setq blink-cursor-count 0)
(defun blink-cursor-timer-function ()
  (when (not (internal-show-cursor-p))
    (when (>= blink-cursor-count (length blink-cursor-colors))
      (setq blink-cursor-count 0))
    (set-cursor-color (nth blink-cursor-count blink-cursor-colors))
    (setq blink-cursor-count (+ 1 blink-cursor-count)))
  (internal-show-cursor nil (not (internal-show-cursor-p))))

;; Conf-mode
(add-to-list 'auto-mode-alist '("\\.gdextension\\'" . conf-mode))

;;LaTex
(setenv "PATH" (concat "/usr/local/texlive/2024/bin/x86_64-linux:" (getenv "PATH")))
;;(setq org-latex-packages-alist '(("" "fullpage") ("avoid-all" "widows-and-orphans") ("" "svg"))

;; Artist Mode
(add-hook 'artist-mode-hook
	        (lambda ()
	          (local-set-key (kbd "<f1>") 'org-mode)
	          (local-set-key (kbd "<f2>") 'artist-select-op-pen-line) ; f2 = pen mode
            (local-set-key (kbd "<f3>") 'artist-select-op-line)     ; f3 = line
	          (local-set-key (kbd "<f4>") 'artist-select-op-square)   ; f4 = rectangle
	          (local-set-key (kbd "<f5>") 'artist-select-op-ellipse)  ; f5 = ellipse
	          (local-set-key (kbd "C-z") 'undo)
            ))

(global-set-key (kbd "C-<f5>") (lambda()
			                           (interactive)
			                           (show-all)
			                           (artist-mode)))

(setq-default company-backends '((company-bbdb :with company-yasnippet)
                                 (company-dabbrev company-ispell :with company-yasnippet)))

(use-package treesit-auto
  :ensure t
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

;; Displays the key bindings following your currently entered incomplete command (a prefix) in a popup
(use-package which-key
:ensure t
:config
(which-key-mode))

;;(use-package casual-dired
;;  :ensure t
;;  :bind (:map dired-mode-map ("C-x o" . 'casual-dired-tmenu)))

;; Treemacs -Only using the icons from treemacs into dired
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	  treemacs-deferred-git-apply-delay        0.5
	  treemacs-directory-name-transformer      #'identity
	  treemacs-display-in-side-window          t
	  treemacs-eldoc-display                   'simple
	  treemacs-file-event-delay                2000
	  treemacs-file-extension-regex            treemacs-last-period-regex-value
	  treemacs-file-follow-delay               0.2
	  treemacs-file-name-transformer           #'identity
	  treemacs-follow-after-init               t
	  treemacs-expand-after-init               t
	  treemacs-find-workspace-method           'find-for-file-or-pick-first
	  treemacs-git-command-pipe                ""
	  treemacs-goto-tag-strategy               'refetch-index
	  treemacs-header-scroll-indicators        '(nil . "^^^^^^")
	  treemacs-hide-dot-git-directory          t
	  treemacs-indentation                     2
	  treemacs-indentation-string              " "
	  treemacs-is-never-other-window           nil
	  treemacs-max-git-entries                 5000
	  treemacs-missing-project-action          'ask
	  treemacs-move-forward-on-expand          nil
	  treemacs-no-png-images                   nil
	  treemacs-no-delete-other-windows         t
	  treemacs-project-follow-cleanup          nil
	  treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	  treemacs-position                        'left
	  treemacs-read-string-input               'from-child-frame
	  treemacs-recenter-distance               0.1
	  treemacs-recenter-after-file-follow      nil
	  treemacs-recenter-after-tag-follow       nil
	  treemacs-recenter-after-project-jump     'always
	  treemacs-recenter-after-project-expand   'on-distance
	  treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	  treemacs-project-follow-into-home        nil
	  treemacs-show-cursor                     nil
	  treemacs-show-hidden-files               t
	  treemacs-silent-filewatch                nil
	  treemacs-silent-refresh                  nil
	  treemacs-sorting                         'alphabetic-asc
	  treemacs-select-when-already-in-treemacs 'move-back
	  treemacs-space-between-root-nodes        t
	  treemacs-tag-follow-cleanup              t
	  treemacs-tag-follow-delay                1.5
	  treemacs-text-scale                      nil
	  treemacs-user-mode-line-format           nil
	  treemacs-user-header-line-format         nil
	  treemacs-wide-toggle-width               70
	  treemacs-width                           35
	  treemacs-width-increment                 1
	  treemacs-width-is-initially-locked       t
	  treemacs-workspace-switch-cleanup        nil)

    ;; Uuncomment this to double the icon size.
    ;; (treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
(treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
		 (not (null treemacs-python-executable)))
(`(t . t)
 (treemacs-git-mode 'deferred))
(`(t . _)
 (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
	("M-0"       . treemacs-select-window)
	("C-x t 1"   . treemacs-delete-other-windows)
	("C-x t t"   . treemacs)
	("C-x t d"   . treemacs-select-directory)
	("C-x t B"   . treemacs-bookmark)
	("C-x t C-t" . treemacs-find-file)
	("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :ensure t
  :config (treemacs-set-scope-type 'Tabs))

;;wiki info org
(use-package wikinforg
  :ensure t)

(global-set-key (kbd "C-c n w") 'wikinforg)

;;Identation
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq indent-line-function 'insert-tab)

(setq js-indent-level 2)

;; (drag-stuff-global-mode 1)
;; (drag-stuff-define-keys )

(when (require 'paredit nil t)
  (dolist (map (list lisp-mode-map emacs-lisp-mode-map))
    (define-key map (kbd "M-(")   'paredit-wrap-round)
    (define-key map (kbd "C-M-f") 'paredit-forward)
    (define-key map (kbd "C-M-b") 'paredit-backward)
    (define-key map (kbd "C-)")   'paredit-forward-slurp-sexp)
    (define-key map (kbd "C-M-)") 'paredit-forward-barf-sexp)
    (define-key map (kbd "C-(")   'paredit-backward-slurp-sexp)
    (define-key map (kbd "C-M-(") 'paredit-backward-barf-sexp)
    (define-key map (kbd "M-s s") 'paredit-split-sexp)
    (define-key map (kbd "M-s r") 'paredit-raise-sexp)
    (define-key map (kbd "M-s S") 'paredit-join-sexps)
    (define-key map (kbd "M-s J") 'paredit-join-sexps)
    (define-key map (kbd "M-s u") 'paredit-splice-sexp-killing-backward)
    (define-key map (kbd "M-s d") 'paredit-splice-sexp-killing-forward)
    (define-key map (kbd "M-q")   'paredit-reindent-defun)))
  
;;Org-mode
(use-package org-bullets
	:ensure t
	:init
	(setq org-bullets-bullet-list
	      '("◉" "◎" "◇" "○" "►" "•"))
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

;; active Babel languages
(org-babel-do-load-languages
'org-babel-load-languages
'((shell . t)
  (java . t)
  (plantuml . t)
  (gnuplot . t)))

(setq org-plantuml-jar-path "~/.emacs.d/plantuml/plantuml.jar")
  
(setq org-todo-keywords
  '((sequence "TODO(t)" "NEXT(n)" "WAIT(w)" "PROJ(p)" "LOOP(l)" "DONE(d)")))

;; Org Reveal
;;(require 'org-re-reveal)
;;(setq org-re-reveal-root "file:///home/julien/emacs/reveal.js-master")

(global-set-key (kbd "C-c n r") 'org-re-reveal-export-to-html)

;; Org svg
(defun svg-progress-percent (value)
  (save-match-data
   (svg-image (svg-lib-concat
               (svg-lib-progress-bar  (/ (string-to-number value) 100.0)
                                 nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
               (svg-lib-tag (concat value "%")
                            nil :stroke 0 :margin 0)) :ascent 'center)))

(defun svg-progress-count (value)
  (save-match-data
    (let* ((seq (split-string value "/"))           
           (count (if (stringp (car seq))
                      (float (string-to-number (car seq)))
                    0))
           (total (if (stringp (cadr seq))
                      (float (string-to-number (cadr seq)))
                    1000)))
      (svg-image (svg-lib-concat
                  (svg-lib-progress-bar (/ count total) nil
                                        :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
                  (svg-lib-tag value nil
                               :stroke 0 :margin 0)) :ascent 'center))))
  
;; org-roam dependencies
(use-package websocket
  :ensure t)

(use-package simple-httpd
  :ensure t)

(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory "~/Documents/RoamNotes")
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :default:")
      :unnarrowed t)
     ("e" "ets" plain
      ""
      :if-new (file+head "ets%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :ets:")
      :unnarrowed t)  
     ("n" "notes" plain
      ""
      :if-new (file+head "notes%<%Y-%m-%d_%H:%M:%S>-${slug}.org" "#+title: ${title}\n#+author:Secrétaire Julien Giguère\n#+LANGUAGE: fr\n#+filetags: :ets:notes:")
      :unnarrowed t)  
     ("s" "saura" plain
      ""
      :if-new (file+head "saura%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :saura:")
      :unnarrowed t)  
     ))
  :bind (("C-c n l" . org-roam-buffer-toggle)
	       ("C-c n f" . org-roam-node-find)
	       ("C-c n i" . org-roam-node-insert)
	       ("C-c n g" . org-roam-ui-mode)
	       ("C-c n a" . org-roam-alias-add)
	       ;; Dailies
	       ("C-c n j" . org-roam-dailies-capture-today))
  :config
  (require 'org-roam-protocol)
  (org-roam-setup))
;; (add-to-list 'load-path "~/.emacs.d/gitclone/org-roam-ui/")
;; (load-library "org-roam-ui")

(use-package org
  :commands (org-table-iterate-buffer-tables org-toggle-pretty-entities))

(use-package org-roam-ui
  :commands (orui-open orui-node-local orui-node-zoom orui-sync-theme))

(setq native-comp-async-report-warnings-errors nil)
  
(require 'org-roam-export)
(setq org-latex-packages-alist '(("margin=2cm" "geometry" nil)))
(add-to-list 'org-latex-packages-alist '("AUTO" "babel" nil))
(setq org-latex-toc-command "\\tableofcontents  \\clearpage")
(define-key global-map (kbd "C-c n e") #'org-latex-export-to-pdf)

;; (define-key global-map (kbd "<f12>") #'org-transclusion-add)
;; (define-key global-map (kbd "C-c n t") #'org-transclusion-mode)
;; (add-hook 'org-mode-hook 'org-transclusion-mode)

(add-hook 'yaml-mode-hook 'flymake-yamllint-setup)

;; LSP - InteliSense
(use-package eglot
  :ensure t
  :hook ((( ;; clojure-mode clojurec-mode clojurescript-mode
            java-mode ;; scala-mode
  )
          . eglot-ensure)
         ((cider-mode eglot-managed-mode) . eglot-disable-in-cider))
  :preface
  (defun eglot-disable-in-cider ()
    (when (eglot-managed-p)
      (if (bound-and-true-p cider-mode)
          (progn
            (remove-hook 'completion-at-point-functions 'eglot-completion-at-point t)
            (remove-hook 'xref-backend-functions 'eglot-xref-backend t))
        (add-hook 'completion-at-point-functions 'eglot-completion-at-point nil t)
        (add-hook 'xref-backend-functions 'eglot-xref-backend nil t))))
  :custom
  (eglot-autoshutdown t)
  (eglot-events-buffer-size 0)
  (eglot-extend-to-xref nil)
  (eglot-ignored-server-capabilities
   '(:hoverProvider
     :documentHighlightProvider
     :documentFormattingProvider
     :documentRangeFormattingProvider
     :documentOnTypeFormattingProvider
     :colorProvider
     :foldingRangeProvider))
  (eglot-stay-out-of '(yasnippet)))
  
;; Restclient
(use-package restclient
       :ensure t)
      (use-package try
	      :ensure t)
(add-to-list 'auto-mode-alist '("\\.http\\'" . restclient-mode))

;; gpt.el
(global-set-key (kbd "C-c p r") 'gptel-send-region)
(global-set-key (kbd "C-c p b") 'gptel-send-buffer)
(global-set-key (kbd "C-c p p") 'gptel)

;; (use-package transient
;;   :ensure t)

;; helm
(use-package helm
:ensure t)

;; avy
(use-package avy
    :ensure t)

;; ivy -vertico is good apparently-
(use-package ivy
  :ensure t
  :init
  (ivy-mode 1)
  :config
  (setq ivy-use-virtual-buffers t
        ivy-count-format "(%d/%d) "
        enable-recursive-minibuffers t))

;; expand-region
(use-package expand-region
  :bind ("C-=" . er/expand-region))

;; multiple-cursors
(use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))

;; swiper
(use-package swiper
    :ensure t
    :bind ("C-s" . swiper))

;; (use-package auto-complete
;;     :ensure t
;;    :config
;;    (ac-config-default)
;;    (global-auto-complete-mode 1))

(use-package company
   :ensure t
   :config
   (setq company-idle-delay 0)
   (setq company-minimum-prefix-length 3)
   (global-company-mode 1))

(electric-pair-mode 1)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;;--------------------------------------------------------------------------
;;  Unsorted Config End  
;;--------------------------------------------------------------------------

;;--------------------------------------------------------------------------
;;  Visuals  
;;--------------------------------------------------------------------------

  ;; Theme
  (add-to-list 'custom-theme-load-path "~/dotfiles/.emacs.d/julien-theme.el")

;;--------------------------------------------------------------------------
;;  Global Keybindings - Hotkeys  
;;--------------------------------------------------------------------------

  (global-set-key (kbd "C-c i")
                'do-org-show-all-inline-images)

  (global-set-key (kbd "C-c c")
                     'comment-region)
  (global-set-key (kbd "C-c u")
                     'uncomment-region)

  (global-set-key (kbd "C-c r") 'replace-string)

  (global-set-key (kbd "C-c a") 'org-agenda)
